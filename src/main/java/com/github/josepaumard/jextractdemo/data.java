// Generated by jextract

package com.github.josepaumard.jextractdemo;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct data {
 *     char kind;
 *     int payload;
 *     char extra;
 * }
 * }
 */
public class data {

    data() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        library_h.C_CHAR.withName("kind"),
        MemoryLayout.paddingLayout(3),
        library_h.C_INT.withName("payload"),
        library_h.C_CHAR.withName("extra"),
        MemoryLayout.paddingLayout(3)
    ).withName("data");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte kind$LAYOUT = (OfByte)$LAYOUT.select(groupElement("kind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char kind
     * }
     */
    public static final OfByte kind$layout() {
        return kind$LAYOUT;
    }

    private static final long kind$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char kind
     * }
     */
    public static final long kind$offset() {
        return kind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char kind
     * }
     */
    public static byte kind(MemorySegment struct) {
        return struct.get(kind$LAYOUT, kind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char kind
     * }
     */
    public static void kind(MemorySegment struct, byte fieldValue) {
        struct.set(kind$LAYOUT, kind$OFFSET, fieldValue);
    }

    private static final OfInt payload$LAYOUT = (OfInt)$LAYOUT.select(groupElement("payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int payload
     * }
     */
    public static final OfInt payload$layout() {
        return payload$LAYOUT;
    }

    private static final long payload$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int payload
     * }
     */
    public static final long payload$offset() {
        return payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int payload
     * }
     */
    public static int payload(MemorySegment struct) {
        return struct.get(payload$LAYOUT, payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int payload
     * }
     */
    public static void payload(MemorySegment struct, int fieldValue) {
        struct.set(payload$LAYOUT, payload$OFFSET, fieldValue);
    }

    private static final OfByte extra$LAYOUT = (OfByte)$LAYOUT.select(groupElement("extra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char extra
     * }
     */
    public static final OfByte extra$layout() {
        return extra$LAYOUT;
    }

    private static final long extra$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char extra
     * }
     */
    public static final long extra$offset() {
        return extra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char extra
     * }
     */
    public static byte extra(MemorySegment struct) {
        return struct.get(extra$LAYOUT, extra$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char extra
     * }
     */
    public static void extra(MemorySegment struct, byte fieldValue) {
        struct.set(extra$LAYOUT, extra$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

